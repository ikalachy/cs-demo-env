"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsDemoEnvStack = void 0;
const cdk = require("aws-cdk-lib");
const ssm = require("aws-cdk-lib/aws-ssm");
const aws_cdk_lib_1 = require("aws-cdk-lib");
// import * as sqs from 'aws-cdk-lib/aws-sqs';
class CsDemoEnvStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const csDemoLambda = new cdk.aws_lambda.Function(this, "csDemoLambda", {
            code: cdk.aws_lambda.Code.fromAsset("lambda"),
            handler: "index.handler",
            runtime: cdk.aws_lambda.Runtime.NODEJS_16_X,
            environment: {
                OPENAI_API_KEY: "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",
                CONTENTSTACK_API_KEY: "blt0619d4d4d9959be5",
                CONTENTSTACK_DELIVERY_TOKEN: "cs6cb30291a57dd132b61beac4",
                CONTENTSTACK_ENVIRONMENT: "development",
                CONTENTSTACK_API_HOST: "api.contentstack.io",
                CONTENTSTACK_APP_HOST: "app.contentstack.com"
                // REACT_APP_CONTENTSTACK_MANAGEMENT_TOKEN = your_management_token
            }
        });
        const lambdaUrl = new cdk.aws_lambda.CfnUrl(this, "lambdaUrl", {
            targetFunctionArn: csDemoLambda.functionArn,
            authType: cdk.aws_lambda.FunctionUrlAuthType.NONE,
            cors: { allowOrigins: ["*"] }
        });
        const lambdaPermission = new cdk.CfnResource(this, "lambdaPermission", {
            type: "AWS::Lambda::Permission",
            properties: {
                Action: "lambda:InvokeFunctionUrl",
                FunctionName: csDemoLambda.functionArn,
                Principal: "*",
                FunctionUrlAuthType: "NONE"
            }
        });
        const lambdaUrlParam = new ssm.StringParameter(this, "alerts-email-param", {
            parameterName: "/cs-demo/lambda-url",
            stringValue: lambdaUrl.attrFunctionUrl,
            description: "lambda url to invoke",
            type: ssm.ParameterType.STRING,
            tier: ssm.ParameterTier.STANDARD,
            allowedPattern: ".*"
        });
        new cdk.CfnOutput(this, "lambda-proxy-url", {
            value: lambdaUrl.attrFunctionUrl
        });
    }
}
exports.CsDemoEnvStack = CsDemoEnvStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3MtZGVtby1lbnYtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcy1kZW1vLWVudi1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsMkNBQTJDO0FBQzNDLDZDQUFnRDtBQUVoRCw4Q0FBOEM7QUFFOUMsTUFBYSxjQUFlLFNBQVEsbUJBQUs7SUFDdkMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUMxRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUU7WUFDckUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDN0MsT0FBTyxFQUFFLGVBQWU7WUFDeEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDM0MsV0FBVyxFQUFFO2dCQUNYLGNBQWMsRUFBRSxxREFBcUQ7Z0JBRXJFLG9CQUFvQixFQUFFLHFCQUFxQjtnQkFDM0MsMkJBQTJCLEVBQUUsNEJBQTRCO2dCQUN6RCx3QkFBd0IsRUFBRSxhQUFhO2dCQUV2QyxxQkFBcUIsRUFBRSxxQkFBcUI7Z0JBQzVDLHFCQUFxQixFQUFFLHNCQUFzQjtnQkFDN0Msa0VBQWtFO2FBQ25FO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQzdELGlCQUFpQixFQUFFLFlBQVksQ0FBQyxXQUFXO1lBQzNDLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUk7WUFDakQsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ3JFLElBQUksRUFBRSx5QkFBeUI7WUFDL0IsVUFBVSxFQUFFO2dCQUNWLE1BQU0sRUFBRSwwQkFBMEI7Z0JBQ2xDLFlBQVksRUFBRSxZQUFZLENBQUMsV0FBVztnQkFDdEMsU0FBUyxFQUFFLEdBQUc7Z0JBQ2QsbUJBQW1CLEVBQUUsTUFBTTthQUM1QjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUU7WUFDekUsYUFBYSxFQUFFLHFCQUFxQjtZQUNwQyxXQUFXLEVBQUUsU0FBUyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLHNCQUFzQjtZQUNuQyxJQUFJLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNO1lBQzlCLElBQUksRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVE7WUFDaEMsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUMxQyxLQUFLLEVBQUUsU0FBUyxDQUFDLGVBQWU7U0FDakMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBbERELHdDQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIHNzbSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNzbVwiO1xuaW1wb3J0IHsgU3RhY2ssIFN0YWNrUHJvcHMgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG4vLyBpbXBvcnQgKiBhcyBzcXMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXNxcyc7XG5cbmV4cG9ydCBjbGFzcyBDc0RlbW9FbnZTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCBjc0RlbW9MYW1iZGEgPSBuZXcgY2RrLmF3c19sYW1iZGEuRnVuY3Rpb24odGhpcywgXCJjc0RlbW9MYW1iZGFcIiwge1xuICAgICAgY29kZTogY2RrLmF3c19sYW1iZGEuQ29kZS5mcm9tQXNzZXQoXCJsYW1iZGFcIiksXG4gICAgICBoYW5kbGVyOiBcImluZGV4LmhhbmRsZXJcIixcbiAgICAgIHJ1bnRpbWU6IGNkay5hd3NfbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE2X1gsXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBPUEVOQUlfQVBJX0tFWTogXCJzay1ENXpacnNQM3Bzb3VwVnA4YXZVU1QzQmxia0ZKQ2VVWGhnelhONGZ5bjdHZm4zZ21cIixcblxuICAgICAgICBDT05URU5UU1RBQ0tfQVBJX0tFWTogXCJibHQwNjE5ZDRkNGQ5OTU5YmU1XCIsXG4gICAgICAgIENPTlRFTlRTVEFDS19ERUxJVkVSWV9UT0tFTjogXCJjczZjYjMwMjkxYTU3ZGQxMzJiNjFiZWFjNFwiLFxuICAgICAgICBDT05URU5UU1RBQ0tfRU5WSVJPTk1FTlQ6IFwiZGV2ZWxvcG1lbnRcIixcblxuICAgICAgICBDT05URU5UU1RBQ0tfQVBJX0hPU1Q6IFwiYXBpLmNvbnRlbnRzdGFjay5pb1wiLFxuICAgICAgICBDT05URU5UU1RBQ0tfQVBQX0hPU1Q6IFwiYXBwLmNvbnRlbnRzdGFjay5jb21cIlxuICAgICAgICAvLyBSRUFDVF9BUFBfQ09OVEVOVFNUQUNLX01BTkFHRU1FTlRfVE9LRU4gPSB5b3VyX21hbmFnZW1lbnRfdG9rZW5cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGxhbWJkYVVybCA9IG5ldyBjZGsuYXdzX2xhbWJkYS5DZm5VcmwodGhpcywgXCJsYW1iZGFVcmxcIiwge1xuICAgICAgdGFyZ2V0RnVuY3Rpb25Bcm46IGNzRGVtb0xhbWJkYS5mdW5jdGlvbkFybixcbiAgICAgIGF1dGhUeXBlOiBjZGsuYXdzX2xhbWJkYS5GdW5jdGlvblVybEF1dGhUeXBlLk5PTkUsXG4gICAgICBjb3JzOiB7IGFsbG93T3JpZ2luczogW1wiKlwiXSB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBsYW1iZGFQZXJtaXNzaW9uID0gbmV3IGNkay5DZm5SZXNvdXJjZSh0aGlzLCBcImxhbWJkYVBlcm1pc3Npb25cIiwge1xuICAgICAgdHlwZTogXCJBV1M6OkxhbWJkYTo6UGVybWlzc2lvblwiLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBBY3Rpb246IFwibGFtYmRhOkludm9rZUZ1bmN0aW9uVXJsXCIsXG4gICAgICAgIEZ1bmN0aW9uTmFtZTogY3NEZW1vTGFtYmRhLmZ1bmN0aW9uQXJuLFxuICAgICAgICBQcmluY2lwYWw6IFwiKlwiLFxuICAgICAgICBGdW5jdGlvblVybEF1dGhUeXBlOiBcIk5PTkVcIlxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgbGFtYmRhVXJsUGFyYW0gPSBuZXcgc3NtLlN0cmluZ1BhcmFtZXRlcih0aGlzLCBcImFsZXJ0cy1lbWFpbC1wYXJhbVwiLCB7XG4gICAgICBwYXJhbWV0ZXJOYW1lOiBcIi9jcy1kZW1vL2xhbWJkYS11cmxcIixcbiAgICAgIHN0cmluZ1ZhbHVlOiBsYW1iZGFVcmwuYXR0ckZ1bmN0aW9uVXJsLFxuICAgICAgZGVzY3JpcHRpb246IFwibGFtYmRhIHVybCB0byBpbnZva2VcIixcbiAgICAgIHR5cGU6IHNzbS5QYXJhbWV0ZXJUeXBlLlNUUklORyxcbiAgICAgIHRpZXI6IHNzbS5QYXJhbWV0ZXJUaWVyLlNUQU5EQVJELFxuICAgICAgYWxsb3dlZFBhdHRlcm46IFwiLipcIlxuICAgIH0pO1xuXG4gICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywgXCJsYW1iZGEtcHJveHktdXJsXCIsIHtcbiAgICAgIHZhbHVlOiBsYW1iZGFVcmwuYXR0ckZ1bmN0aW9uVXJsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==